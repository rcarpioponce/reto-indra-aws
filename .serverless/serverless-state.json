{
  "service": {
    "service": "service-appointment",
    "serviceObject": {
      "name": "service-appointment"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-2",
      "stage": "dev",
      "environment": {
        "DYNAMODB_TABLE": "appointments",
        "SNS_TOPIC": {
          "Fn::GetAtt": [
            "AppointmentSNSTopic",
            "TopicArn"
          ]
        },
        "SQS_PE": "sqs-pe",
        "SQS_CL": "sqs-cl",
        "SQS_RESULT": "sqs-result",
        "DB_HOST": "localhost",
        "DB_PORT": "3306",
        "DB_NAME": "demo",
        "DB_USER": "user",
        "DB_PASSWORD": "pass",
        "EVENT_BUS_NAME": "MyEventBus",
        "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
        "DB_PE_PORT": "3306",
        "DB_PE_NAME": "mysql_pe",
        "DB_PE_USER": "admin",
        "DB_PE_PASSWORD": "tu_clave_segura",
        "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
        "DB_CL_PORT": "3306",
        "DB_CL_NAME": "mysql_cl",
        "DB_CL_USER": "admin",
        "DB_CL_PASSWORD": "tu_clave_segura"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-2:*:table/appointments",
                "arn:aws:dynamodb:us-east-2:*:table/appointments/index/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": {
                "Ref": "AppointmentSNSTopic"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage"
              ],
              "Resource": [
                "arn:aws:sqs:us-east-2:*:sqs-pe",
                "arn:aws:sqs:us-east-2:*:sqs-cl",
                "arn:aws:sqs:us-east-2:*:sqs-result"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AppointmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/service-appointment-dev-appointment"
            }
          },
          "GetAppointmentsByInsuredIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/service-appointment-dev-getAppointmentsByInsuredId"
            }
          },
          "AppointmentUnderscorepeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/service-appointment-dev-appointment_pe"
            }
          },
          "AppointmentUnderscoreclLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/service-appointment-dev-appointment_cl"
            }
          },
          "AppointmentUnderscoreresultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/service-appointment-dev-appointment_result"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "service-appointment",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/service-appointment-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/service-appointment-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Deny",
                        "Action": "logs:PutLogEvents",
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/service-appointment-dev-swagger-ui:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/service-appointment-dev-swagger-json:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "SQSPeQueue",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SQSClQueue",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SQSResultQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "service-appointment",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AppointmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/appointment.zip"
              },
              "Handler": "src/interfaces/appointment/handler.createAppointment",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-appointment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentLogGroup"
            ]
          },
          "GetAppointmentsByInsuredIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/getAppointmentsByInsuredId.zip"
              },
              "Handler": "src/interfaces/appointments/handler.getAppointmentsByInsuredId",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-getAppointmentsByInsuredId",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAppointmentsByInsuredIdLogGroup"
            ]
          },
          "AppointmentUnderscorepeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/appointment_pe.zip"
              },
              "Handler": "src/interfaces/appointment-pe/handler.appointmentHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-appointment_pe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscorepeLogGroup"
            ]
          },
          "AppointmentUnderscoreclLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/appointment_cl.zip"
              },
              "Handler": "src/interfaces/appointment-cl/handler.appointmentHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-appointment_cl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscoreclLogGroup"
            ]
          },
          "AppointmentUnderscoreresultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/appointment_result.zip"
              },
              "Handler": "src/interfaces/appointment-result/handler.resultHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-appointment_result",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscoreresultLogGroup"
            ]
          },
          "SwaggerUILambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/swaggerUI.zip"
              },
              "Handler": "swagger/swagger-html.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-swagger-ui",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            }
          },
          "SwaggerJSONLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z/swaggerJSON.zip"
              },
              "Handler": "swagger/swagger-json.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "service-appointment-dev-swagger-json",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "appointments",
                  "SNS_TOPIC": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SNS_TOPIC\"]"
                  },
                  "SQS_PE": "sqs-pe",
                  "SQS_CL": "sqs-cl",
                  "SQS_RESULT": "sqs-result",
                  "DB_HOST": "localhost",
                  "DB_PORT": "3306",
                  "DB_NAME": "demo",
                  "DB_USER": "user",
                  "DB_PASSWORD": "pass",
                  "EVENT_BUS_NAME": "MyEventBus",
                  "DB_PE_HOST": "tu-endpoint-rds-pe.rds.amazonaws.com",
                  "DB_PE_PORT": "3306",
                  "DB_PE_NAME": "mysql_pe",
                  "DB_PE_USER": "admin",
                  "DB_PE_PASSWORD": "tu_clave_segura",
                  "DB_CL_HOST": "tu-endpoint-rds-cl.rds.amazonaws.com",
                  "DB_CL_PORT": "3306",
                  "DB_CL_NAME": "mysql_cl",
                  "DB_CL_USER": "admin",
                  "DB_CL_PASSWORD": "tu_clave_segura"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            }
          },
          "SwaggerUILambdaVersionbXeONBcbtNThnyJR0RXslPkb41uumjfam029bxNDABc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerUILambdaFunction"
              },
              "CodeSha256": "oJdINEHnZ9XCrwhur9/5/QX6LjuyZutPA2+iYBWT9iY="
            }
          },
          "SwaggerJSONLambdaVersionWQceesmYFeFv7K51sltihVCxA5r7FmJPl6ayTGTaIiA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerJSONLambdaFunction"
              },
              "CodeSha256": "fmTUG6C4VzhwUuJD9fhRIrI5Ds8Vz0MSZY1S8130/T8="
            }
          },
          "GetAppointmentsByInsuredIdLambdaVersionBkiZnbzY4oTHpkJKNVPxE7HVmiiz9VVbf1xdSk6Aqg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAppointmentsByInsuredIdLambdaFunction"
              },
              "CodeSha256": "DDssW6SbUyvtf1Tdl3+ls4900iMkEMj+9JUlzf43d9w="
            }
          },
          "AppointmentLambdaVersion6MVUvjEIShT2TkzaDT7bxIrufmUd1ddS40eEgI5vE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentLambdaFunction"
              },
              "CodeSha256": "EEff6RGolb1ssNwdXxr4KMMLwldocfw2edaIwPbPcds="
            }
          },
          "AppointmentUnderscorepeLambdaVersionJwCUfA63Q1WRXRMggk7QeBFzL9i2VG7hzF5i2c8O3M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscorepeLambdaFunction"
              },
              "CodeSha256": "NKWiu/CVFolxzw2Y7c5e3qB0GBF4x8msblZD2UjTuQw="
            }
          },
          "AppointmentUnderscoreclLambdaVersionnJOedH9a93sKoeH7Ezzc14GbglL0hXz4fxGw00oo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscoreclLambdaFunction"
              },
              "CodeSha256": "RAg+W43vqmusY8avkarW4NjLZXwKR9sbW1B0FrjyFxk="
            }
          },
          "AppointmentUnderscoreresultLambdaVersionAnOe0NDfONbu67M5UeRkCxZQtugG8Y7TkHTTWMoARug": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscoreresultLambdaFunction"
              },
              "CodeSha256": "kr7lcnDywhTImE7WicaxeaA/FjTPXRM/EusQsWi26ZQ="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-service-appointment",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAppointments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "appointments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppointmentsInsuredidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "PathPart": "{insuredId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSwagger": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "swagger",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSwaggerjson": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "swagger.json",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppointmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AppointmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAppointmentsInsuredidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.insuredId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsInsuredidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAppointmentsByInsuredIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayServiceappointmentRequestValidator"
              }
            },
            "DependsOn": [
              "GetAppointmentsByInsuredIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSwaggerGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSwagger"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SwaggerUILambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SwaggerUILambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSwaggerjsonGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSwaggerjson"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SwaggerJSONLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SwaggerJSONLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayServiceappointmentRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "service-appointment-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayDeployment1746734367234": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAppointmentsPost",
              "ApiGatewayMethodAppointmentsInsuredidVarGet",
              "ApiGatewayMethodSwaggerGet",
              "ApiGatewayMethodSwaggerjsonGet"
            ]
          },
          "AppointmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAppointmentsByInsuredIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAppointmentsByInsuredIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SwaggerUILambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerUILambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SwaggerJSONLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerJSONLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppointmentUnderscorepeEventSourceMappingSQSSQSPeQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSPeQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscorepeLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentUnderscoreclEventSourceMappingSQSSQSClQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSClQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscoreclLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentUnderscoreresultEventSourceMappingSQSSQSResultQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSResultQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscoreresultLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "appointments",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "insuredId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "insuredId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "insuredId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "AppointmentSNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "agendamiento-topic"
            }
          },
          "SQSPeQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sqs-pe"
            }
          },
          "SQSClQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sqs-cl"
            }
          },
          "SQSResultQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sqs-result"
            }
          },
          "SNSSubscriptionPE": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentSNSTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SQSPeQueue",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "PE"
                ]
              }
            }
          },
          "SNSSubscriptionCL": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentSNSTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SQSClQueue",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "CL"
                ]
              }
            }
          },
          "PolicySQSPe": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SQSPeQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSPeQueue",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentSNSTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "PolicySQSCl": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SQSClQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSClQueue",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentSNSTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "MyEventBus": {
            "Type": "AWS::Events::EventBus",
            "Properties": {
              "Name": "MyEventBus"
            }
          },
          "MyEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": {
                "Ref": "MyEventBus"
              },
              "EventPattern": {
                "source": [
                  "appointment_pe",
                  "appointment_cl"
                ],
                "detail-type": [
                  "event_update_appointment"
                ]
              },
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SQSResultQueue",
                      "Arn"
                    ]
                  },
                  "Id": "TargetSQSResult"
                }
              ]
            }
          },
          "EventBridgePermission": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SQSResultQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "events.amazonaws.com"
                    },
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSResultQueue",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Fn::GetAtt": [
                            "MyEventRule",
                            "Arn"
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-ServerlessDeploymentBucketName"
            }
          },
          "SwaggerUILambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerUILambdaVersionbXeONBcbtNThnyJR0RXslPkb41uumjfam029bxNDABc"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-SwaggerUILambdaFunctionQualifiedArn"
            }
          },
          "SwaggerJSONLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerJSONLambdaVersionWQceesmYFeFv7K51sltihVCxA5r7FmJPl6ayTGTaIiA"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-SwaggerJSONLambdaFunctionQualifiedArn"
            }
          },
          "GetAppointmentsByInsuredIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAppointmentsByInsuredIdLambdaVersionBkiZnbzY4oTHpkJKNVPxE7HVmiiz9VVbf1xdSk6Aqg"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-GetAppointmentsByInsuredIdLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentLambdaVersion6MVUvjEIShT2TkzaDT7bxIrufmUd1ddS40eEgI5vE"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-AppointmentLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscorepeLambdaVersionJwCUfA63Q1WRXRMggk7QeBFzL9i2VG7hzF5i2c8O3M"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscoreclLambdaVersionnJOedH9a93sKoeH7Ezzc14GbglL0hXz4fxGw00oo"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscoreresultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscoreresultLambdaVersionAnOe0NDfONbu67M5UeRkCxZQtugG8Y7TkHTTWMoARug"
            },
            "Export": {
              "Name": "sls-service-appointment-dev-AppointmentUnderscoreresultLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-service-appointment-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "snsTopicArn": {
        "Fn::GetAtt": [
          "AppointmentSNSTopic",
          "TopicArn"
        ]
      },
      "esbuild": {
        "bundle": true,
        "minify": false,
        "sourcemap": true,
        "target": "node18",
        "platform": "node",
        "concurrency": 10,
        "external": [
          "aws-sdk"
        ],
        "exclude": [],
        "packager": "npm",
        "keepNames": true
      },
      "autoswagger": {
        "title": "Appointment Service API",
        "apiType": "http",
        "typefiles": [
          "src/application/dto/appointment-input.d.ts",
          "src/domain/models/appointment.d.ts"
        ]
      }
    },
    "plugins": [
      "serverless-auto-swagger",
      "serverless-esbuild",
      "serverless-offline",
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "appointment": {
        "handler": "src/interfaces/appointment/handler.createAppointment",
        "events": [
          {
            "http": {
              "path": "appointments",
              "method": "post",
              "bodyType": "AppointmentInput",
              "responseData": {
                "201": {
                  "description": "Appointment created successfully"
                },
                "400": {
                  "description": "Bad request"
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "service-appointment-dev-appointment",
        "package": {
          "artifact": ".serverless\\appointment.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentLambdaVersion6MVUvjEIShT2TkzaDT7bxIrufmUd1ddS40eEgI5vE"
      },
      "getAppointmentsByInsuredId": {
        "handler": "src/interfaces/appointments/handler.getAppointmentsByInsuredId",
        "events": [
          {
            "http": {
              "path": "appointments/{insuredId}",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.path.insuredId": true
                }
              },
              "responseData": {
                "200": {
                  "description": "Appointments retrieved successfully",
                  "bodyType": "AppointmentsResponse"
                },
                "400": {
                  "description": "Bad request"
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "service-appointment-dev-getAppointmentsByInsuredId",
        "package": {
          "artifact": ".serverless\\getAppointmentsByInsuredId.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAppointmentsByInsuredIdLambdaVersionBkiZnbzY4oTHpkJKNVPxE7HVmiiz9VVbf1xdSk6Aqg"
      },
      "appointment_pe": {
        "handler": "src/interfaces/appointment-pe/handler.appointmentHandler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][7][\"Resource\"][0]"
              }
            }
          }
        ],
        "name": "service-appointment-dev-appointment_pe",
        "package": {
          "artifact": ".serverless\\appointment_pe.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentUnderscorepeLambdaVersionJwCUfA63Q1WRXRMggk7QeBFzL9i2VG7hzF5i2c8O3M"
      },
      "appointment_cl": {
        "handler": "src/interfaces/appointment-cl/handler.appointmentHandler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][7][\"Resource\"][1]"
              }
            }
          }
        ],
        "name": "service-appointment-dev-appointment_cl",
        "package": {
          "artifact": ".serverless\\appointment_cl.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentUnderscoreclLambdaVersionnJOedH9a93sKoeH7Ezzc14GbglL0hXz4fxGw00oo"
      },
      "appointment_result": {
        "handler": "src/interfaces/appointment-result/handler.resultHandler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][7][\"Resource\"][2]"
              }
            }
          }
        ],
        "name": "service-appointment-dev-appointment_result",
        "package": {
          "artifact": ".serverless\\appointment_result.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentUnderscoreresultLambdaVersionAnOe0NDfONbu67M5UeRkCxZQtugG8Y7TkHTTWMoARug"
      },
      "swaggerUI": {
        "name": "service-appointment-dev-swagger-ui",
        "handler": "swagger/swagger-html.handler",
        "disableLogs": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "swagger",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\swaggerUI.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SwaggerUILambdaVersionbXeONBcbtNThnyJR0RXslPkb41uumjfam029bxNDABc"
      },
      "swaggerJSON": {
        "name": "service-appointment-dev-swagger-json",
        "handler": "swagger/swagger-json.handler",
        "disableLogs": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "swagger.json",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\swaggerJSON.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SwaggerJSONLambdaVersionWQceesmYFeFv7K51sltihVCxA5r7FmJPl6ayTGTaIiA"
      }
    },
    "resources": {
      "Resources": {
        "AppointmentsDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "appointments",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "insuredId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "insuredId-index",
                "KeySchema": [
                  {
                    "AttributeName": "insuredId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "AppointmentSNSTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "agendamiento-topic"
          }
        },
        "SQSPeQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sqs-pe"
          }
        },
        "SQSClQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sqs-cl"
          }
        },
        "SQSResultQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sqs-result"
          }
        },
        "SNSSubscriptionPE": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "TopicArn": {
              "Ref": "AppointmentSNSTopic"
            },
            "Protocol": "sqs",
            "Endpoint": {
              "Fn::GetAtt": [
                "SQSPeQueue",
                "Arn"
              ]
            },
            "FilterPolicy": {
              "countryISO": [
                "PE"
              ]
            }
          }
        },
        "SNSSubscriptionCL": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "TopicArn": {
              "Ref": "AppointmentSNSTopic"
            },
            "Protocol": "sqs",
            "Endpoint": {
              "Fn::GetAtt": [
                "SQSClQueue",
                "Arn"
              ]
            },
            "FilterPolicy": {
              "countryISO": [
                "CL"
              ]
            }
          }
        },
        "PolicySQSPe": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SQSPeQueue"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSPeQueue",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "AppointmentSNSTopic"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "PolicySQSCl": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SQSClQueue"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSClQueue",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "AppointmentSNSTopic"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "MyEventBus": {
          "Type": "AWS::Events::EventBus",
          "Properties": {
            "Name": "MyEventBus"
          }
        },
        "MyEventRule": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "EventBusName": {
              "Ref": "MyEventBus"
            },
            "EventPattern": {
              "source": [
                "appointment_pe",
                "appointment_cl"
              ],
              "detail-type": [
                "event_update_appointment"
              ]
            },
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "SQSResultQueue",
                    "Arn"
                  ]
                },
                "Id": "TargetSQSResult"
              }
            ]
          }
        },
        "EventBridgePermission": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SQSResultQueue"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "events.amazonaws.com"
                  },
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSResultQueue",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Fn::GetAtt": [
                          "MyEventRule",
                          "Arn"
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "service-appointment",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!**/*.ts",
          "node_modules/aws-sdk/**"
        ],
        "artifactsS3KeyDirname": "serverless/service-appointment/dev/code-artifacts"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "appointment": {
          "$ref": "$[\"service\"][\"functions\"][\"appointment\"]"
        },
        "getAppointmentsByInsuredId": {
          "$ref": "$[\"service\"][\"functions\"][\"getAppointmentsByInsuredId\"]"
        },
        "appointment_pe": {
          "$ref": "$[\"service\"][\"functions\"][\"appointment_pe\"]"
        },
        "appointment_cl": {
          "$ref": "$[\"service\"][\"functions\"][\"appointment_cl\"]"
        },
        "appointment_result": {
          "$ref": "$[\"service\"][\"functions\"][\"appointment_result\"]"
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "outputs": {
        "SnsTopicArn": {
          "Value": {
            "Ref": "AppointmentSNSTopic"
          },
          "Export": {
            "Name": "service-appointment-dev-SnsTopicArn"
          }
        }
      }
    },
    "layers": {},
    "outputs": {
      "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"outputs\"]"
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/service-appointment/dev/1746734444480-2025-05-08T20:00:44.480Z",
    "artifact": ""
  }
}